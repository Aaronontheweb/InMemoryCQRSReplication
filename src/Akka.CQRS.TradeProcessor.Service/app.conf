﻿akka {
    extensions = ["Akka.HealthCheck.AkkaHealthCheckExt, Akka.HealthCheck"]
    actor {
		provider = cluster
    }

	# https://github.com/petabridge/akkadotnet-healthcheck
	healthcheck{
		# Uses Akka.Persistence HealthCheck. If MongoDb is compromised, so are we.
		liveness.provider = "Akka.HealthCheck.Persistence.AkkaPersistenceLivenessProbeProvider, Akka.HealthCheck.Persistence"
		liveness.transport = tcp
		liveness.tcp.port = 11000 # port used by K8s healthchecks
	}
	
	remote {
		dot-netty.tcp {
			hostname = "127.0.0.1"
			port = 0
		}
	}            

	cluster {
		#will inject this node as a self-seed node at run-time
		seed-nodes = ["akka.tcp://webcrawler@localhost:4053"] 
		roles = [trade-processor]

		sharding{
			role = "trade-processor"
		}
	}

	persistence{
		journal {
		    akka.persistence.journal.plugin = "akka.persistence.journal.mongodb"
			akka.persistence.journal.mongodb.class = "Akka.Persistence.MongoDb.Journal.MongoDbJournal, Akka.Persistence.MongoDb"
			akka.persistence.journal.mongodb.connection-string = "<database connection string>" # Will be swapped out at runtime
			akka.persistence.journal.mongodb.collection = "EventJournal"
		}

		snapshot-store {
		    akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.mongodb"
			akka.persistence.snapshot-store.mongodb.class = "Akka.Persistence.MongoDb.Snapshot.MongoDbSnapshotStore, Akka.Persistence.MongoDb"
			akka.persistence.snapshot-store.mongodb.connection-string = "<database connection string>"  # Will be swapped out at runtime
			akka.persistence.snapshot-store.mongodb.collection = "SnapshotStore"
		}
	}
}